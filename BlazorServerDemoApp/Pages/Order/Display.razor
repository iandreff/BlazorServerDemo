@page "/Order/Display/{Id:int}"
@inject IFoodData foodData
@inject IOrderData orderData
@using  BlazorServerDemoApp.Models

<h3>Display</h3>

@if (order is null)
{
    <h4>Record Loading...</h4>
}
else
{
    <table class="table">
        <tbody>
            <tr>
                <td><strong>Order Name</strong></td>
                <td>@order.OrderName</td>
            </tr>
            <tr>
                <td><strong>Order Date</strong></td>
                <td>@order.OrderDate</td>
            </tr>
            <tr>
                <td><strong>Order Total</strong></td>
                <td>@string.Format("{0:C}", order.Total)</td>
            </tr>
            <tr>
                <td><strong>Item Ordered</strong></td>
                <td>@itemPurchased</td>
            </tr>
            <tr>
                <td><strong>Quantity Ordered</strong></td>
                <td>@order.Quantity</td>
            </tr>
        </tbody>
    </table>
    <EditForm Model="@updateModel">
        <DataAnnotationsValidator />
        <ValidationSummary Model="@updateModel" />
        <div class="form-group">
            <label class="control-label">Name of the Order</label>
            <InputText @bind-Value="updateModel.OrderName" class="form-control" />
            <ValidationMessage For="@(()=>updateModel.OrderName)" class="text-danger" />
        </div>
        <div class="form-group">
            <input type="submit" class="btn btn-primary" value="Order Food" />
        </div>

    </EditForm>
}

@code
{

    [Parameter]
    public int Id { get; set; }
    private OrderModel order;
    private string itemPurchased;
    private OrderUpdateModel updateModel = new OrderUpdateModel();

    protected override async Task OnInitializedAsync()
    {
        order = await orderData.GetOrderById(Id);

        if (order != null)
        {
            var food = await foodData.GetFood();
            itemPurchased = food.Where(f => f.Id.Equals(order.FoodId)).FirstOrDefault()?.Title;

            updateModel.Id = order.Id;
            updateModel.OrderName = order.OrderName;
        }
    }

    private async Task HandleValidSubmit() 
    {
        await orderData.UpdateOrderName(updateModel.Id, updateModel.OrderName);
    }
}
