@page "/Order/Create" //This is equivalent to {Browser.Router} from "react"
@inject IFoodData foodData //this equivalente to useContex()
@inject IOrderData orderData
@inject NavigationManager navigationManager 

<h3>Create</h3>

<EditForm Model="@order" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary Model="@order" />
    <div class="form-group">
        <label class="control-label">Item to Order</label>
        <select @onchange="FoodItemChange">
            <option value="">Select a meal</option>
            @foreach (var i in foodItems)
            {
                <option value="@i.Id">@i.Title</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label class="control-label">Quantity</label>
        <InputNumber @bind-Value="order.Quantity" class="form-control" />
        <ValidationMessage For="@(()=>order.Quantity)" class="text-danger" />
    </div>
    <div class="form-group">
        <label class="control-label">Order Name</label>
        <InputText @bind-Value="order.OrderName" class="form-control" />
        <ValidationMessage For="@(()=>order.OrderName)" class="text-danger" />
    </div>
    <div class="form-group">
        <input type="submit" class="btn btn-primary" value="Order Food" />
    </div>

</EditForm>


@code {
    private OrderModel order = new OrderModel();
    private List<FoodModel> foodItems = new List<FoodModel>();

    protected override async Task OnParametersSetAsync() //This is equivalent to OnLoad in JS
    {
        foodItems = await foodData.GetFood();
    }

    private void FoodItemChange(ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value.ToString()) == false)
        {
            order.FoodId = int.Parse(e.Value.ToString());
        }
        else
        {
            order.FoodId = 0;
        }
    }

    private async Task HandleValidSubmit()
    {
        order.Total = order.Quantity * (foodItems.Where(i => i.Id.Equals(order.FoodId)).First()).Price;
        int id = await orderData.CreateOrder(order);
        navigationManager.NavigateTo($"Order/Display/{id}");
    }



}
